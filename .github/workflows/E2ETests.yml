name: E2E Tests
on:
  schedule:
    - cron: "30 0 * * *" # Schedule fpr Demo Env Runs at 6.00AM IST - 12.30AM UTC
    - cron: "0 5 * * *" # Schedule fpr QA.lite Env Runs at 10.30AM IST - 5.00AM UTC
    - cron: "*/30 * * * *"
  repository_dispatch:
    types: [Smoke-Test-Dev-Lite]
  workflow_dispatch:
    inputs:
      TEST_CONTEXT:
        description: "Test tags to be executed. eg. clinic, payment, lab, hospital, smoke, regression. Logical operators can be used."
        required: false
        default: "clinic & smoke"
      TARGET_ENV:
        description: "Environment to test"
        required: true
        type: choice
        default: dev.lite
        options:
          - docker.lite
          - dev.lite
          - qa.lite
          - lite
          - demo
          - demo-v94
      TARGET_BRANCH:
        description: "Branch to checkout"
        required: true
        type: choice
        default: main
        options:
          - main
          - Release_v93
concurrency:
  group: ${{ github.workflow }}-${{ github.event.client_payload.context || github.event.inputs.TEST_CONTEXT || 'clinic & smoke' }}-${{ github.event.inputs.TARGET_ENV || 'dev.lite' }}-${{github.event.schedule}}
  cancel-in-progress: true
env:
  TEST_CONTEXT: ${{ github.event.client_payload.context || github.event.inputs.TEST_CONTEXT || 'clinic & smoke' }}
  TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'dev.lite' }}
  ENV_FLAG: false
  TARGET_BRANCH: ${{ github.event.inputs.TARGET_BRANCH || 'main'}}
  LANGUAGE: en-IN
jobs:
  build-and-run:
    name: Build and Run E2E tests
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables for Demo Regression Schedule
        if: github.event.schedule=='30 0 * * *'
        run: |
          echo "TARGET_ENV=demo" >> $GITHUB_ENV
          echo "TEST_CONTEXT=hospital" >> $GITHUB_ENV
          echo "TEST_SETUP=true" >> $GITHUB_ENV
          echo "TARGET_BRANCH=Release_v93" >> $GITHUB_ENV
      - name: Set environment variables for QA.lite Regression Schedule
        if: github.event.schedule=='0 5 * * *'
        run: |
          echo "TARGET_ENV=qa.lite" >> $GITHUB_ENV
          echo "TEST_CONTEXT=clinic & regression" >> $GITHUB_ENV
          echo "TARGET_BRANCH=main" >> $GITHUB_ENV
      - name: Set environment variables for docker.lite forms
        if: github.event.schedule=='*/30 * * * *'
        run: |
          echo "TARGET_ENV=docker.lite" >> $GITHUB_ENV
          echo "TEST_CONTEXT=forms" >> $GITHUB_ENV
          echo "TARGET_BRANCH=main" >> $GITHUB_ENV
      - name: Show current Env variables
        run: |
          echo "TARGET_ENV - ${{env.TARGET_ENV}} TEST_CONTEXT - ${{env.TEST_CONTEXT}} TARGET_BRANCH - ${{env.TARGET_BRANCH}}"
      - run: echo "Current Concurrency Group - ${{ github.workflow }}-${{ github.event.client_payload.context || github.event.inputs.TEST_CONTEXT || 'clinic & smoke' }}-${{ github.event.inputs.TARGET_ENV || 'dev.lite' }}-${{github.event.schedule}}"
      - uses: actions/checkout@v2
        with:
          ref: ${{env.TARGET_BRANCH}}
          submodules: recursive
      - name: Wait for environment to be up
        shell: bash
        run: bash .github/waitForEnv.sh $TARGET_ENV
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
      - uses: zcong1993/setup-timezone@v1.1.2
        with:
          timezone: "Asia/Kolkata"
      - name: Install dependencies
        run: |
          date
          sudo apt-get update
          sudo apt-get install -y libgbm-dev
          sudo apt-get install -y xvfb
          sudo apt-get -y install xorg xvfb gtk2-engines-pixbuf
          sudo apt-get -y install dbus-x11 xfonts-base xfonts-100dpi xfonts-75dpi xfonts-cyrillic xfonts-scalable
          sudo apt-get -y install imagemagick x11-apps
          sudo apt-get update
          sudo apt-get install -yq \
            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget ffmpeg
      - run: npm install @getgauge/cli
      - run: npm install
      - name: Run Setup
        if: ${{ env.TEST_SETUP == 'true' }}
        run: xvfb-run npm run ci -- --env $TARGET_ENV --tags 'setup'
      - name: Run Tests
        id: run_test
        run: xvfb-run npm run ci -- --env $TARGET_ENV --tags "${{env.TEST_CONTEXT}}"
      - name: Upload HTML reports
        if: ${{(success() || failure()) && env.ENV_FLAG}}
        uses: actions/upload-artifact@v2
        with:
          name: HTML_Reports_${{ GITHUB.RUN_NUMBER }}
          path: ./reports/html-report
      - name: Upload Logs
        if: ${{(success() || failure()) && env.ENV_FLAG}}
        uses: actions/upload-artifact@v2
        with:
          name: Logs_${{ GITHUB.RUN_NUMBER }}
          path: ./logs/gauge.log
      - name: Upload Video
        if: ${{(success() || failure()) && env.ENV_FLAG}}
        uses: actions/upload-artifact@v2
        with:
          name: Videos_${{ GITHUB.RUN_NUMBER }}
          path: ./reports/video
      - name: Deploy reports
        if: ${{(success() || failure()) && env.ENV_FLAG == 'true'}}
        env:
          SRC_FOLDER_PATH: "reports/html-report"
          TARGET_BRANCH: "gh-pages"
          MAX_DIR: 10
        shell: bash
        run: bash .github/deleteOldReports.sh $MAX_DIR $SRC_FOLDER_PATH $TARGET_BRANCH ${{secrets.BAHMNI_USERNAME}} ${{secrets.BAHMNI_EMAIL}} ${{GITHUB.RUN_ID}} ${{GITHUB.RUN_ATTEMPT}}
      - name: Get Repository Name
        if: always()
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV
      - name: Send Slack Notification if execution Success
        if: ${{ success() && env.ENV_FLAG == 'true'}}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"attachments":[{"color": "#32CD32","blocks":[{"type":"header","text":{"type":"plain_text","text":"‚úÖ Bahmni E2E Tests Passed in ${{env.TARGET_ENV}} for tags ${{env.TEST_CONTEXT}}.","emoji":true}},{"type":"divider"},{"type":"section","text":{"type":"mrkdwn","text":"üß™ View the detailed HTML report here üëâ"},"accessory":{"type":"button","text":{"type":"plain_text","text":"View"},"url":"https://${{github.repository_owner}}.github.io/${{env.REPO_NAME}}/report-${{GITHUB.RUN_ID}}-${{GITHUB.RUN_ATTEMPT}}"}},{"type":"section","text":{"type":"mrkdwn","text":"üß™ View Workflow Run Details üëâ"},"accessory":{"type":"button","text":{"type":"plain_text","text":"View"},"url":"https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}},{"type":"section","fields":[{"type":"plain_text","text":"RUN NUMBER - ${{ GITHUB.RUN_NUMBER }}","emoji":true},{"type":"plain_text","text":"RUN ID - ${{ GITHUB.RUN_ID }}","emoji":true}]}]}]}' ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Send Slack Notification if execution Failure
        if: ${{ failure() && env.ENV_FLAG == 'true'}}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"attachments":[{"color": "#FF0000","blocks":[{"type":"header","text":{"type":"plain_text","text":"‚ùå Bahmni E2E Tests Failed in ${{env.TARGET_ENV}} for tags ${{env.TEST_CONTEXT}}.","emoji":true}},{"type":"divider"},{"type":"section","text":{"type":"mrkdwn","text":"üìå View the detailed HTML report here üëâ"},"accessory":{"type":"button","text":{"type":"plain_text","text":"View"},"url":"https://${{github.repository_owner}}.github.io/${{env.REPO_NAME}}/report-${{GITHUB.RUN_ID}}-${{GITHUB.RUN_ATTEMPT}}"}},{"type":"section","text":{"type":"mrkdwn","text":"üìå View Workflow Run Details üëâ"},"accessory":{"type":"button","text":{"type":"plain_text","text":"View"},"url":"https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}},{"type":"section","fields":[{"type":"plain_text","text":"RUN NUMBER - ${{ GITHUB.RUN_NUMBER }}","emoji":true},{"type":"plain_text","text":"RUN ID - ${{ GITHUB.RUN_ID }}","emoji":true}]}]}]}' ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Send Slack Notification if Environment Not available
        if: ${{(success() || failure()) && env.ENV_FLAG == 'false'}}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"attachments":[{"color": "#FF8C00","blocks":[{"type":"header","text":{"type":"plain_text","text":"‚ö†Ô∏è Unable to execute Bahmni E2E Tests in ${{env.TARGET_ENV}}, Environment is down.","emoji":true}},{"type":"divider"},{"type":"section","text":{"type":"mrkdwn","text":"üìå View Workflow Run Details üëâ"},"accessory":{"type":"button","text":{"type":"plain_text","text":"View"},"url":"https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}},{"type":"section","fields":[{"type":"plain_text","text":"RUN NUMBER - ${{ GITHUB.RUN_NUMBER }}","emoji":true},{"type":"plain_text","text":"RUN ID - ${{ GITHUB.RUN_ID }}","emoji":true}]}]}]}' ${{ secrets.SLACK_WEBHOOK_URL }}
